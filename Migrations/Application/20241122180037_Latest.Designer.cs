// <auto-generated />
using System;
using BlogPost.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogPost.Migrations.Application
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241122180037_Latest")]
    partial class Latest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogPost.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThumbnailImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("BlogPost.Models.Topic", b =>
                {
                    b.Property<Guid>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TopicId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Topic");

                    b.HasData(
                        new
                        {
                            TopicId = new Guid("0c9744c3-2732-49de-8308-5d80c33d7833"),
                            Name = "Tech"
                        },
                        new
                        {
                            TopicId = new Guid("006a8560-e434-4579-b207-57280e22894c"),
                            Name = "Science"
                        },
                        new
                        {
                            TopicId = new Guid("56e385a4-3eca-4dd6-9544-f4b96d269380"),
                            Name = "Health"
                        },
                        new
                        {
                            TopicId = new Guid("5bc55cd3-b149-44cb-b5cf-bef7a5f132b1"),
                            Name = "Religion"
                        },
                        new
                        {
                            TopicId = new Guid("7c38a8eb-6629-4464-8b58-c560bd793945"),
                            Name = "Life"
                        },
                        new
                        {
                            TopicId = new Guid("330a6ed8-79a6-4897-ad82-2c9dd6742fc4"),
                            Name = "Natural"
                        });
                });

            modelBuilder.Entity("BlogPost.Models.TopicsPosts", b =>
                {
                    b.Property<Guid>("TopicsPostsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TopicsPostsId");

                    b.HasIndex("TopicId");

                    b.HasIndex("PostId", "TopicId")
                        .IsUnique();

                    b.ToTable("TopicsPosts");
                });

            modelBuilder.Entity("BlogPost.Models.TopicsPosts", b =>
                {
                    b.HasOne("BlogPost.Models.Post", "Post")
                        .WithMany("TopicsPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogPost.Models.Topic", "Topic")
                        .WithMany("TopicsPosts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("BlogPost.Models.Post", b =>
                {
                    b.Navigation("TopicsPosts");
                });

            modelBuilder.Entity("BlogPost.Models.Topic", b =>
                {
                    b.Navigation("TopicsPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
