// <auto-generated />
using System;
using BlogPost.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogPost.Migrations.Application
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241117160516_TopicInitAndColumnRename")]
    partial class TopicInitAndColumnRename
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogPost.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThumbnailImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("BlogPost.Models.Topic", b =>
                {
                    b.Property<Guid>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.ToTable("Topic");

                    b.HasData(
                        new
                        {
                            TopicId = new Guid("989c8e71-eb07-4da6-bb78-1b05b7833c9b"),
                            Name = "Tech"
                        },
                        new
                        {
                            TopicId = new Guid("b37d995d-93a9-42d9-bcb8-771142ea3e5a"),
                            Name = "Science"
                        },
                        new
                        {
                            TopicId = new Guid("65fc0014-b968-4be5-8619-55d81543f355"),
                            Name = "Health"
                        },
                        new
                        {
                            TopicId = new Guid("86f02aef-f65d-4bed-b587-600c7340a487"),
                            Name = "Religion"
                        },
                        new
                        {
                            TopicId = new Guid("515e8f2f-a46d-4eb6-ad12-b4d8b4523ca7"),
                            Name = "Life"
                        },
                        new
                        {
                            TopicId = new Guid("c9556c1a-c241-4f68-aa9f-430fc0196867"),
                            Name = "Natural"
                        });
                });

            modelBuilder.Entity("BlogPost.Models.TopicsPosts", b =>
                {
                    b.Property<Guid>("TopicsPostsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TopicsPostsId");

                    b.HasIndex("PostId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicsPosts");
                });

            modelBuilder.Entity("BlogPost.Models.TopicsPosts", b =>
                {
                    b.HasOne("BlogPost.Models.Post", "Post")
                        .WithMany("TopicsPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogPost.Models.Topic", "Topic")
                        .WithMany("TopicsPosts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("BlogPost.Models.Post", b =>
                {
                    b.Navigation("TopicsPosts");
                });

            modelBuilder.Entity("BlogPost.Models.Topic", b =>
                {
                    b.Navigation("TopicsPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
